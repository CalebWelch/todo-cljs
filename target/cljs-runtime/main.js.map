{"version":3,"sources":["main.cljs"],"mappings":";;;;AAKA,AAAKA,AAAQ,AAAA,AAACC;AACd,AAAKC,AAAS,AAAA,AAACD;AACf,AAAKE,AAAQ,AAAA,AAACF;AACd,AAAKG,AAAgB,AAAA,AAACH;AAEtB,AAAA,AAAMK,AAAYC,AAAKC,AAAMC;AAA7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAJ;AAAA,AAGiB,AAACK,AAAOD,AAAI,AAAA,AAAAJ;AAH7B,AAMWE;;AAGX,AAAA,AAAMI,AAAcC,AAAEC,AAAEC,AAAOC;AAA/B,AACE,AAAI,AAACC,AAAE,AAAAC,AAAA,AAAAC,AAAEN;AAAF,AAAA,AAAAK,AAAAA,AAAAA,AAAIJ,AAAAA;AAAGC;AACZ,AAACK,AAAMP,AAAEQ,AAAMP,AAAEE;;AACjB,AAACI,AAAMP,AAAEQ,AAAMP,AAAEC;;;AAErB,AAAA,AAAMO,AAAMC;AAAZ,AACE,AAAMC,AAAY,AAAA,AAAA,AAAA,AAACtB;AAAnB,AACE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAoB,AAAA,AAAA,AAAAiB,AAAcK;AAAlC,AAMwB,AAAA,AAAA,AAAA,AAACZ,AAAaY;AAC5BD;;;AAEd,AAAA,AAAME,AAAcC;AAApB,AACE,AAAA,AAAAP,AAAMQ,AAAUD;AAAhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAEG,AAAAE,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAi5E8C,AAAA4B,AAAAjC;AAj5E9CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AACKf,AAAK,AAAC6B,AAAIxB,AAASsB;;AADxB,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAnB,AACKP,AAAK,AAAC6B,AAAIxB,AAASsB;;;AADxB;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAQ,AAACsB,AAAM,AAACd,AAAMT;;;AAG3B,AAAA,AAAMyB;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMM7C,AAAqBN;AAN3B,AAOqD,AACE,AAACmB,AAAMhB,AAAQiD;;AACf,AAAA,AAAAlC,AAACC,AAAMjB,AAASmD,AAAMrD;AAT7E,AAWG,AAACwB,AAActB;;AAElB,AAAA,AAAMoD,AAAOC;AAAb,AACE,AAAA,AAACC,AAAaD,AAAG,AAAA,AAACE;;AAEpB,AAAA,AAAMC;AAAN,AACE,AAACJ,AAAMH;;AACP,AAAA,AAACQ;;AAEH,AAAA,AAAMC;AAAN,AACE,AAACN,AAAMH;;AACP,AAAA,AAACQ","names":["main/itemAdd","reagent.core.atom","main/valueAdd","main/counter","main/cardStateHolder","p1__33823#","main/input-box","type","label","var","cljs.core/reset!","main/toggle-class","a","k","class1","class2","cljs.core._EQ_","fexpr__33824","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","main/card","item","local-state","main/ordered-list","val","newItems","iter__4582__auto__","s__33826","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__33828","cljs.core/chunk-buffer","i__33827","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33825","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","x","cljs.core.range","cljs.core.nth","main/main-component","cljs.core/inc","cljs.core/conj","main/mount","c","reagent.dom.render","js/document.getElementById","main/reload!","cljs.core.print","main/main!","cljs.core/chunk-first"],"sourcesContent":["(ns main\n  (:require [reagent.dom :as dom]\n            [reagent.core :as r]\n            ))\n\n(def itemAdd (r/atom \"\"))\n(def valueAdd (r/atom  ()))\n(def counter (r/atom 0))\n(def cardStateHolder (r/atom ()))\n\n(defn input-box  [type label var]\n  [:div.input-box\n   [:input \n    {:on-change #(reset! var (-> %\n                                 .-target\n                                 .-value))\n     :type type}\n    ]])\n\n(defn toggle-class [a k class1 class2]\n  (if (= (@a k) class1)\n    (swap! a assoc k class2)\n    (swap! a assoc k class1)))\n\n(defn card [item]\n  (let [local-state (r/atom {:card-state \"incomplete\"})]\n    (fn [] [:li {:class (:card-state @local-state)}\n            [:div.card\n             [:ul.ba\n              [:label.switch\n               [:input  {:type \"checkbox\"}]\n               [:span.slider.round\n                {:on-click #(toggle-class local-state :card-state \"incomplete\" \"complete\")}]]\n              item]]])))\n\n(defn ordered-list [val]\n  (let [newItems @val]\n    [:div.flex.flex-col {:class \"items List\"}\n     (for [x (range (count newItems))] \n         [card (nth newItems x) ])]))\n\n(defn main-component []\n  [:div.flex.flex-col.p-20 {:justify-content \"center\" }\n   [:section.todoapp\n    [:header.header\n     [:h1 \"todos\"]]\n    [:div.flex.justify-center\n     [input-box \"text\" \"\"  itemAdd]\n     [:button.btn-blue.hover:bg-teal-300 {:on-click #(do\n                                                       (swap! counter inc)\n                                                       (swap! valueAdd conj @itemAdd))}\n      \"press-me\"]]]\n   (ordered-list  valueAdd)])\n\n(defn mount [c]\n  (dom/render  [c] (js/document.getElementById \"app\")))\n\n(defn reload! []\n  (mount main-component)\n  (print \"reloaded\"))\n\n(defn main! []\n  (mount main-component)\n  (print \"main\"))\n"]}